
1. 线程的创建方式一：继承Thread类
1.1 步骤：
一、创建一个继承于Thread类的子类
二、重写Thread类的run() ---> 将此线程要执行的操作，声明在此方法中
三、创建当前Thread的子类的对象
四、通过对象调用start():1.启动线程  2.调用当前线程的run()方法

1.2 例题：创建一个分线程1，用于遍历100以内的偶数
【拓展】 再创建一个分线程2，用于遍历100以内的偶数


2. 线程的创建方式二：实现Runnable接口
2.1 步骤：
一、创建一个实现Runnable接口的类
二、实现接口中的run() ---> 将此线程要执行的操作，声明在此方法中
三、创建当前实现类的对象
四、将此对象作为参数传递到Thread类的构造器中，创建Thread类的实列
五、Thread类的实列调用start():1.启动线程  2.调用当前线程的run()方法


2.2 例题：创建分线程遍历100以内的偶数


3. 对比两种方式？
   共同点：① 启动线程，使用的都是Thread类中定义的start()
        ② 创建的线程对象，都是Thread类或其子类的实例

   不同点：一个是类的继承，一个是接口的实现
        - 避免了单继承的局限性
        - 多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。
        - 增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。
   联系：